# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestPythontest():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_pythontest(self):
    # Test name: python test
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://selenium-testing-testing.web.app/")
    # 2 | setWindowSize | 652x672 | 
    self.driver.set_window_size(652, 672)
    # 3 | click | id=lastname | 
    self.driver.find_element(By.ID, "lastname").click()
    # 4 | type | id=lastname | NWUNELI
    self.driver.find_element(By.ID, "lastname").send_keys("NWUNELI")
    # 5 | click | id=firstname | 
    self.driver.find_element(By.ID, "firstname").click()
    # 6 | type | id=firstname | LUCY
    self.driver.find_element(By.ID, "firstname").send_keys("LUCY")
    # 7 | click | id=addMemberBtn | 
    self.driver.find_element(By.ID, "addMemberBtn").click()
    # 8 | assertAlert | Size must be greater than 0 | 
    assert self.driver.switch_to.alert.text == "Size must be greater than 0"
    # 9 | click | id=GroupSize | 
    self.driver.find_element(By.ID, "GroupSize").click()
    # 10 | type | id=GroupSize | 1
    self.driver.find_element(By.ID, "GroupSize").send_keys("1")
    # 11 | click | id=addMemberBtn | 
    self.driver.find_element(By.ID, "addMemberBtn").click()
    # 12 | click | id=lastname | 
    self.driver.find_element(By.ID, "lastname").click()
    # 13 | type | id=lastname | smith
    self.driver.find_element(By.ID, "lastname").send_keys("smith")
    # 14 | click | id=firstname | 
    self.driver.find_element(By.ID, "firstname").click()
    # 15 | type | id=firstname | john
    self.driver.find_element(By.ID, "firstname").send_keys("john")
    # 16 | click | id=GroupSize | 
    self.driver.find_element(By.ID, "GroupSize").click()
    # 17 | type | id=GroupSize | 2
    self.driver.find_element(By.ID, "GroupSize").send_keys("2")
    # 18 | click | id=addMemberBtn | 
    self.driver.find_element(By.ID, "addMemberBtn").click()
    # 19 | select | id=members | label=NWUNELI LUCY
    dropdown = self.driver.find_element(By.ID, "members")
    dropdown.find_element(By.XPATH, "//option[. = 'NWUNELI LUCY']").click()
    # 20 | click | css=option:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(1)").click()
    # 21 | click | id=deleteMemberBtn | 
    self.driver.find_element(By.ID, "deleteMemberBtn").click()
    # 22 | assertAlert | ERROR! You must work in this function before to send to Staging Environment! | 
    assert self.driver.switch_to.alert.text == "ERROR! You must work in this function before to send to Staging Environment!"
    # 23 | select | id=members | label=smith john
    dropdown = self.driver.find_element(By.ID, "members")
    dropdown.find_element(By.XPATH, "//option[. = 'smith john']").click()
    # 24 | click | css=option:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(2)").click()
    # 25 | click | id=deleteMemberBtn | 
    self.driver.find_element(By.ID, "deleteMemberBtn").click()
    # 26 | assertAlert | ERROR! You must work in this function before to send to Staging Environment! | 
    assert self.driver.switch_to.alert.text == "ERROR! You must work in this function before to send to Staging Environment!"
  
